{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAY/B,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAXMO,SAASC,cAAc,SAiB/BC,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAQX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,OAAOC,SAE7C,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAOI,QAASD,EACnCnB,EAAcmB,EAAI,GAAIL,EAAMM,MAAQL,EAAKK,MAAQD,GAC9CE,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAwB,OAAOC,QAAQ,qBAAqBtB,QAAeC,UAEpDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAwB,OAAOG,QAAQ,oBAAoBxB,QAAeC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const { delay, step, amount } = event.target.elements;\n\n  for (let i = 0; i < +amount.value; ++i) {\n    createPromise(i + 1, +delay.value + step.value * i)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","target","elements","i","value","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.5167b22a.js.map"}